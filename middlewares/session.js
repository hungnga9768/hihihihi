// const session = require("express-session");
// const sessionStorage = require("node-sessionstorage");

// class CustomStore extends session.Store {
//   constructor() {
//     super();
//   }

//   get(sid, callback) {
//     const data = sessionStorage.getItem(sid);
//     callback(null, data ? JSON.parse(data) : null);
//   }

//   set(sid, session, callback) {
//     sessionStorage.setItem(sid, JSON.stringify(session));
//     callback(null);
//   }

//   destroy(sid, callback) {
//     sessionStorage.removeItem(sid);
//     callback(null);
//   }
// }

// const sessionMiddleware = session({
//   secret: "your-secret-key",
//   resave: false,
//   saveUninitialized: true,
//   store: new CustomStore(),
//   cookie: {
//     secure: false, // true n·∫øu d√πng HTTPS
//     maxAge: 1000 * 60 * 6000,
//   },
// });
// module.exports = sessionMiddleware;

// const session = require("express-session");
// const Redis = require("redis");
// const RedisStore = require("connect-redis")(session);

// // T·∫°o Redis client
// const redisClient = Redis.createClient({
//   url: "redis://localhost:6379", // C·ªïng m·∫∑c ƒë·ªãnh Redis
//   legacyMode: true, // ‚ö†Ô∏è B·∫ÆT BU·ªòC n·∫øu d√πng v·ªõi connect-redis v6 tr·ªü l√™n
// });

// redisClient.connect().catch(console.error); // K·∫øt n·ªëi Redis

// // Middleware session d√πng Redis
// const sessionMiddleware = session({
//   store: new RedisStore({ client: redisClient }),
//   secret: "your-secret-key", // üîê ƒê·∫∑t chu·ªói b√≠ m·∫≠t m·∫°nh
//   resave: false,
//   saveUninitialized: false,
//   cookie: {
//     secure: false, // true n·∫øu d√πng HTTPS
//     httpOnly: true,
//     maxAge: 1000 * 60 * 60 * 24, // 1 ng√†y
//     sameSite: "lax",
//   },
// });

// module.exports = sessionMiddleware;
